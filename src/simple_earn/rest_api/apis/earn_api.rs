/*
 * Binance Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use async_trait::async_trait;
use derive_builder::Builder;
use reqwest;
use rust_decimal::{Decimal, prelude::FromPrimitive};
use serde::{Deserialize, Serialize};
use serde_json::{Value, json};
use std::collections::BTreeMap;

use crate::common::{
    config::ConfigurationRestApi,
    models::{ParamBuildError, RestApiResponse},
    utils::send_request,
};
use crate::simple_earn::rest_api::models;

const HAS_TIME_UNIT: bool = false;

#[async_trait]
pub trait EarnApi: Send + Sync {
    async fn get_flexible_subscription_preview(
        &self,
        params: GetFlexibleSubscriptionPreviewParams,
    ) -> anyhow::Result<RestApiResponse<models::GetFlexibleSubscriptionPreviewResponse>>;
    async fn get_locked_subscription_preview(
        &self,
        params: GetLockedSubscriptionPreviewParams,
    ) -> anyhow::Result<RestApiResponse<Vec<models::GetLockedSubscriptionPreviewResponseInner>>>;
    async fn redeem_flexible_product(
        &self,
        params: RedeemFlexibleProductParams,
    ) -> anyhow::Result<RestApiResponse<models::RedeemFlexibleProductResponse>>;
    async fn redeem_locked_product(
        &self,
        params: RedeemLockedProductParams,
    ) -> anyhow::Result<RestApiResponse<models::RedeemLockedProductResponse>>;
    async fn set_flexible_auto_subscribe(
        &self,
        params: SetFlexibleAutoSubscribeParams,
    ) -> anyhow::Result<RestApiResponse<models::SetFlexibleAutoSubscribeResponse>>;
    async fn set_locked_auto_subscribe(
        &self,
        params: SetLockedAutoSubscribeParams,
    ) -> anyhow::Result<RestApiResponse<models::SetLockedAutoSubscribeResponse>>;
    async fn set_locked_product_redeem_option(
        &self,
        params: SetLockedProductRedeemOptionParams,
    ) -> anyhow::Result<RestApiResponse<models::SetLockedProductRedeemOptionResponse>>;
    async fn subscribe_flexible_product(
        &self,
        params: SubscribeFlexibleProductParams,
    ) -> anyhow::Result<RestApiResponse<models::SubscribeFlexibleProductResponse>>;
    async fn subscribe_locked_product(
        &self,
        params: SubscribeLockedProductParams,
    ) -> anyhow::Result<RestApiResponse<models::SubscribeLockedProductResponse>>;
}

#[derive(Debug, Clone)]
pub struct EarnApiClient {
    configuration: ConfigurationRestApi,
}

impl EarnApiClient {
    pub fn new(configuration: ConfigurationRestApi) -> Self {
        Self { configuration }
    }
}

/// Request parameters for the [`get_flexible_subscription_preview`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`get_flexible_subscription_preview`](#method.get_flexible_subscription_preview).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct GetFlexibleSubscriptionPreviewParams {
    ///
    /// The `product_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub product_id: String,
    ///
    /// The `amount` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub amount: f32,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl GetFlexibleSubscriptionPreviewParams {
    /// Create a builder for [`get_flexible_subscription_preview`].
    ///
    /// Required parameters:
    ///
    /// * `product_id` — String
    /// * `amount` — f32
    ///
    #[must_use]
    pub fn builder(product_id: String, amount: f32) -> GetFlexibleSubscriptionPreviewParamsBuilder {
        GetFlexibleSubscriptionPreviewParamsBuilder::default()
            .product_id(product_id)
            .amount(amount)
    }
}
/// Request parameters for the [`get_locked_subscription_preview`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`get_locked_subscription_preview`](#method.get_locked_subscription_preview).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct GetLockedSubscriptionPreviewParams {
    ///
    /// The `project_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub project_id: String,
    ///
    /// The `amount` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub amount: f32,
    /// true or false, default true.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub auto_subscribe: Option<bool>,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl GetLockedSubscriptionPreviewParams {
    /// Create a builder for [`get_locked_subscription_preview`].
    ///
    /// Required parameters:
    ///
    /// * `project_id` — String
    /// * `amount` — f32
    ///
    #[must_use]
    pub fn builder(project_id: String, amount: f32) -> GetLockedSubscriptionPreviewParamsBuilder {
        GetLockedSubscriptionPreviewParamsBuilder::default()
            .project_id(project_id)
            .amount(amount)
    }
}
/// Request parameters for the [`redeem_flexible_product`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`redeem_flexible_product`](#method.redeem_flexible_product).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct RedeemFlexibleProductParams {
    ///
    /// The `product_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub product_id: String,
    /// true or false, default to false
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub redeem_all: Option<bool>,
    /// if redeemAll is false, amount is mandatory
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub amount: Option<f32>,
    /// `SPOT`,`FUND`, default `SPOT`
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub dest_account: Option<String>,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl RedeemFlexibleProductParams {
    /// Create a builder for [`redeem_flexible_product`].
    ///
    /// Required parameters:
    ///
    /// * `product_id` — String
    ///
    #[must_use]
    pub fn builder(product_id: String) -> RedeemFlexibleProductParamsBuilder {
        RedeemFlexibleProductParamsBuilder::default().product_id(product_id)
    }
}
/// Request parameters for the [`redeem_locked_product`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`redeem_locked_product`](#method.redeem_locked_product).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct RedeemLockedProductParams {
    ///
    /// The `position_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub position_id: String,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl RedeemLockedProductParams {
    /// Create a builder for [`redeem_locked_product`].
    ///
    /// Required parameters:
    ///
    /// * `position_id` — String
    ///
    #[must_use]
    pub fn builder(position_id: String) -> RedeemLockedProductParamsBuilder {
        RedeemLockedProductParamsBuilder::default().position_id(position_id)
    }
}
/// Request parameters for the [`set_flexible_auto_subscribe`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`set_flexible_auto_subscribe`](#method.set_flexible_auto_subscribe).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct SetFlexibleAutoSubscribeParams {
    ///
    /// The `product_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub product_id: String,
    /// true or false
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub auto_subscribe: bool,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl SetFlexibleAutoSubscribeParams {
    /// Create a builder for [`set_flexible_auto_subscribe`].
    ///
    /// Required parameters:
    ///
    /// * `product_id` — String
    /// * `auto_subscribe` — true or false
    ///
    #[must_use]
    pub fn builder(
        product_id: String,
        auto_subscribe: bool,
    ) -> SetFlexibleAutoSubscribeParamsBuilder {
        SetFlexibleAutoSubscribeParamsBuilder::default()
            .product_id(product_id)
            .auto_subscribe(auto_subscribe)
    }
}
/// Request parameters for the [`set_locked_auto_subscribe`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`set_locked_auto_subscribe`](#method.set_locked_auto_subscribe).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct SetLockedAutoSubscribeParams {
    ///
    /// The `position_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub position_id: String,
    /// true or false
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub auto_subscribe: bool,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl SetLockedAutoSubscribeParams {
    /// Create a builder for [`set_locked_auto_subscribe`].
    ///
    /// Required parameters:
    ///
    /// * `position_id` — String
    /// * `auto_subscribe` — true or false
    ///
    #[must_use]
    pub fn builder(
        position_id: String,
        auto_subscribe: bool,
    ) -> SetLockedAutoSubscribeParamsBuilder {
        SetLockedAutoSubscribeParamsBuilder::default()
            .position_id(position_id)
            .auto_subscribe(auto_subscribe)
    }
}
/// Request parameters for the [`set_locked_product_redeem_option`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`set_locked_product_redeem_option`](#method.set_locked_product_redeem_option).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct SetLockedProductRedeemOptionParams {
    ///
    /// The `position_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub position_id: String,
    /// `SPOT`,'FLEXIBLE'
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub redeem_to: String,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl SetLockedProductRedeemOptionParams {
    /// Create a builder for [`set_locked_product_redeem_option`].
    ///
    /// Required parameters:
    ///
    /// * `position_id` — String
    /// * `redeem_to` — `SPOT`,'FLEXIBLE'
    ///
    #[must_use]
    pub fn builder(
        position_id: String,
        redeem_to: String,
    ) -> SetLockedProductRedeemOptionParamsBuilder {
        SetLockedProductRedeemOptionParamsBuilder::default()
            .position_id(position_id)
            .redeem_to(redeem_to)
    }
}
/// Request parameters for the [`subscribe_flexible_product`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`subscribe_flexible_product`](#method.subscribe_flexible_product).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct SubscribeFlexibleProductParams {
    ///
    /// The `product_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub product_id: String,
    ///
    /// The `amount` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub amount: f32,
    /// true or false, default true.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub auto_subscribe: Option<bool>,
    /// `SPOT`,`FUND`,`ALL`, default `SPOT`
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub source_account: Option<String>,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl SubscribeFlexibleProductParams {
    /// Create a builder for [`subscribe_flexible_product`].
    ///
    /// Required parameters:
    ///
    /// * `product_id` — String
    /// * `amount` — f32
    ///
    #[must_use]
    pub fn builder(product_id: String, amount: f32) -> SubscribeFlexibleProductParamsBuilder {
        SubscribeFlexibleProductParamsBuilder::default()
            .product_id(product_id)
            .amount(amount)
    }
}
/// Request parameters for the [`subscribe_locked_product`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`subscribe_locked_product`](#method.subscribe_locked_product).
#[derive(Clone, Debug, Builder)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct SubscribeLockedProductParams {
    ///
    /// The `project_id` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub project_id: String,
    ///
    /// The `amount` parameter.
    ///
    /// This field is **required.
    #[builder(setter(into))]
    pub amount: f32,
    /// true or false, default true.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub auto_subscribe: Option<bool>,
    /// `SPOT`,`FUND`,`ALL`, default `SPOT`
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub source_account: Option<String>,
    /// `SPOT`,`FLEXIBLE`, default `FLEXIBLE`
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub redeem_to: Option<String>,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl SubscribeLockedProductParams {
    /// Create a builder for [`subscribe_locked_product`].
    ///
    /// Required parameters:
    ///
    /// * `project_id` — String
    /// * `amount` — f32
    ///
    #[must_use]
    pub fn builder(project_id: String, amount: f32) -> SubscribeLockedProductParamsBuilder {
        SubscribeLockedProductParamsBuilder::default()
            .project_id(project_id)
            .amount(amount)
    }
}

#[async_trait]
impl EarnApi for EarnApiClient {
    async fn get_flexible_subscription_preview(
        &self,
        params: GetFlexibleSubscriptionPreviewParams,
    ) -> anyhow::Result<RestApiResponse<models::GetFlexibleSubscriptionPreviewResponse>> {
        let GetFlexibleSubscriptionPreviewParams {
            product_id,
            amount,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("productId".to_string(), json!(product_id));

        let amount_value = Decimal::from_f32(amount).unwrap_or_default();
        query_params.insert("amount".to_string(), json!(amount_value));

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::GetFlexibleSubscriptionPreviewResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/flexible/subscriptionPreview",
            reqwest::Method::GET,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn get_locked_subscription_preview(
        &self,
        params: GetLockedSubscriptionPreviewParams,
    ) -> anyhow::Result<RestApiResponse<Vec<models::GetLockedSubscriptionPreviewResponseInner>>>
    {
        let GetLockedSubscriptionPreviewParams {
            project_id,
            amount,
            auto_subscribe,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("projectId".to_string(), json!(project_id));

        let amount_value = Decimal::from_f32(amount).unwrap_or_default();
        query_params.insert("amount".to_string(), json!(amount_value));

        if let Some(rw) = auto_subscribe {
            query_params.insert("autoSubscribe".to_string(), json!(rw));
        }

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<Vec<models::GetLockedSubscriptionPreviewResponseInner>>(
            &self.configuration,
            "/sapi/v1/simple-earn/locked/subscriptionPreview",
            reqwest::Method::GET,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn redeem_flexible_product(
        &self,
        params: RedeemFlexibleProductParams,
    ) -> anyhow::Result<RestApiResponse<models::RedeemFlexibleProductResponse>> {
        let RedeemFlexibleProductParams {
            product_id,
            redeem_all,
            amount,
            dest_account,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("productId".to_string(), json!(product_id));

        if let Some(rw) = redeem_all {
            query_params.insert("redeemAll".to_string(), json!(rw));
        }

        if let Some(rw) = amount {
            let rw = Decimal::from_f32(rw).unwrap_or_default();
            query_params.insert("amount".to_string(), json!(rw));
        }

        if let Some(rw) = dest_account {
            query_params.insert("destAccount".to_string(), json!(rw));
        }

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::RedeemFlexibleProductResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/flexible/redeem",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn redeem_locked_product(
        &self,
        params: RedeemLockedProductParams,
    ) -> anyhow::Result<RestApiResponse<models::RedeemLockedProductResponse>> {
        let RedeemLockedProductParams {
            position_id,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("positionId".to_string(), json!(position_id));

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::RedeemLockedProductResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/locked/redeem",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn set_flexible_auto_subscribe(
        &self,
        params: SetFlexibleAutoSubscribeParams,
    ) -> anyhow::Result<RestApiResponse<models::SetFlexibleAutoSubscribeResponse>> {
        let SetFlexibleAutoSubscribeParams {
            product_id,
            auto_subscribe,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("productId".to_string(), json!(product_id));

        query_params.insert("autoSubscribe".to_string(), json!(auto_subscribe));

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::SetFlexibleAutoSubscribeResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/flexible/setAutoSubscribe",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn set_locked_auto_subscribe(
        &self,
        params: SetLockedAutoSubscribeParams,
    ) -> anyhow::Result<RestApiResponse<models::SetLockedAutoSubscribeResponse>> {
        let SetLockedAutoSubscribeParams {
            position_id,
            auto_subscribe,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("positionId".to_string(), json!(position_id));

        query_params.insert("autoSubscribe".to_string(), json!(auto_subscribe));

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::SetLockedAutoSubscribeResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/locked/setAutoSubscribe",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn set_locked_product_redeem_option(
        &self,
        params: SetLockedProductRedeemOptionParams,
    ) -> anyhow::Result<RestApiResponse<models::SetLockedProductRedeemOptionResponse>> {
        let SetLockedProductRedeemOptionParams {
            position_id,
            redeem_to,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("positionId".to_string(), json!(position_id));

        query_params.insert("redeemTo".to_string(), json!(redeem_to));

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::SetLockedProductRedeemOptionResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/locked/setRedeemOption",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn subscribe_flexible_product(
        &self,
        params: SubscribeFlexibleProductParams,
    ) -> anyhow::Result<RestApiResponse<models::SubscribeFlexibleProductResponse>> {
        let SubscribeFlexibleProductParams {
            product_id,
            amount,
            auto_subscribe,
            source_account,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("productId".to_string(), json!(product_id));

        let amount_value = Decimal::from_f32(amount).unwrap_or_default();
        query_params.insert("amount".to_string(), json!(amount_value));

        if let Some(rw) = auto_subscribe {
            query_params.insert("autoSubscribe".to_string(), json!(rw));
        }

        if let Some(rw) = source_account {
            query_params.insert("sourceAccount".to_string(), json!(rw));
        }

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::SubscribeFlexibleProductResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/flexible/subscribe",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }

    async fn subscribe_locked_product(
        &self,
        params: SubscribeLockedProductParams,
    ) -> anyhow::Result<RestApiResponse<models::SubscribeLockedProductResponse>> {
        let SubscribeLockedProductParams {
            project_id,
            amount,
            auto_subscribe,
            source_account,
            redeem_to,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        query_params.insert("projectId".to_string(), json!(project_id));

        let amount_value = Decimal::from_f32(amount).unwrap_or_default();
        query_params.insert("amount".to_string(), json!(amount_value));

        if let Some(rw) = auto_subscribe {
            query_params.insert("autoSubscribe".to_string(), json!(rw));
        }

        if let Some(rw) = source_account {
            query_params.insert("sourceAccount".to_string(), json!(rw));
        }

        if let Some(rw) = redeem_to {
            query_params.insert("redeemTo".to_string(), json!(rw));
        }

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::SubscribeLockedProductResponse>(
            &self.configuration,
            "/sapi/v1/simple-earn/locked/subscribe",
            reqwest::Method::POST,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }
}

#[cfg(all(test, feature = "simple_earn"))]
mod tests {
    use super::*;
    use crate::TOKIO_SHARED_RT;
    use crate::{errors::ConnectorError, models::DataFuture, models::RestApiRateLimit};
    use async_trait::async_trait;
    use std::collections::HashMap;

    struct DummyRestApiResponse<T> {
        inner: Box<dyn FnOnce() -> DataFuture<Result<T, ConnectorError>> + Send + Sync>,
        status: u16,
        headers: HashMap<String, String>,
        rate_limits: Option<Vec<RestApiRateLimit>>,
    }

    impl<T> From<DummyRestApiResponse<T>> for RestApiResponse<T> {
        fn from(dummy: DummyRestApiResponse<T>) -> Self {
            Self {
                data_fn: dummy.inner,
                status: dummy.status,
                headers: dummy.headers,
                rate_limits: dummy.rate_limits,
            }
        }
    }

    struct MockEarnApiClient {
        force_error: bool,
    }

    #[async_trait]
    impl EarnApi for MockEarnApiClient {
        async fn get_flexible_subscription_preview(
            &self,
            _params: GetFlexibleSubscriptionPreviewParams,
        ) -> anyhow::Result<RestApiResponse<models::GetFlexibleSubscriptionPreviewResponse>>
        {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value = serde_json::from_str(r#"{"totalAmount":"1232.32230982","rewardAsset":"BUSD","airDropAsset":"BETH","estDailyBonusRewards":"0.22759183","estDailyRealTimeRewards":"0.22759183","estDailyAirdropRewards":"0.22759183"}"#).unwrap();
            let dummy_response: models::GetFlexibleSubscriptionPreviewResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::GetFlexibleSubscriptionPreviewResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn get_locked_subscription_preview(
            &self,
            _params: GetLockedSubscriptionPreviewParams,
        ) -> anyhow::Result<RestApiResponse<Vec<models::GetLockedSubscriptionPreviewResponseInner>>>
        {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value = serde_json::from_str(r#"[{"rewardAsset":"AXS","totalRewardAmt":"5.17181528","extraRewardAsset":"BNB","estTotalExtraRewardAmt":"5.17181528","boostRewardAsset":"AXS","estDailyRewardAmt":"1.20928901","nextPay":"1.29295383","nextPayDate":"1646697600000","valueDate":"1646697600000","rewardsEndDate":"1651449600000","deliverDate":"1651536000000","nextSubscriptionDate":"1651536000000"}]"#).unwrap();
            let dummy_response: Vec<models::GetLockedSubscriptionPreviewResponseInner> =
                serde_json::from_value(resp_json.clone()).expect(
                    "should parse into Vec<models::GetLockedSubscriptionPreviewResponseInner>",
                );

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn redeem_flexible_product(
            &self,
            _params: RedeemFlexibleProductParams,
        ) -> anyhow::Result<RestApiResponse<models::RedeemFlexibleProductResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value =
                serde_json::from_str(r#"{"redeemId":40607,"success":true}"#).unwrap();
            let dummy_response: models::RedeemFlexibleProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::RedeemFlexibleProductResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn redeem_locked_product(
            &self,
            _params: RedeemLockedProductParams,
        ) -> anyhow::Result<RestApiResponse<models::RedeemLockedProductResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value =
                serde_json::from_str(r#"{"redeemId":40607,"success":true}"#).unwrap();
            let dummy_response: models::RedeemLockedProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::RedeemLockedProductResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn set_flexible_auto_subscribe(
            &self,
            _params: SetFlexibleAutoSubscribeParams,
        ) -> anyhow::Result<RestApiResponse<models::SetFlexibleAutoSubscribeResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let dummy_response: models::SetFlexibleAutoSubscribeResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetFlexibleAutoSubscribeResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn set_locked_auto_subscribe(
            &self,
            _params: SetLockedAutoSubscribeParams,
        ) -> anyhow::Result<RestApiResponse<models::SetLockedAutoSubscribeResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let dummy_response: models::SetLockedAutoSubscribeResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetLockedAutoSubscribeResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn set_locked_product_redeem_option(
            &self,
            _params: SetLockedProductRedeemOptionParams,
        ) -> anyhow::Result<RestApiResponse<models::SetLockedProductRedeemOptionResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let dummy_response: models::SetLockedProductRedeemOptionResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetLockedProductRedeemOptionResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn subscribe_flexible_product(
            &self,
            _params: SubscribeFlexibleProductParams,
        ) -> anyhow::Result<RestApiResponse<models::SubscribeFlexibleProductResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value =
                serde_json::from_str(r#"{"purchaseId":40607,"success":true}"#).unwrap();
            let dummy_response: models::SubscribeFlexibleProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SubscribeFlexibleProductResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }

        async fn subscribe_locked_product(
            &self,
            _params: SubscribeLockedProductParams,
        ) -> anyhow::Result<RestApiResponse<models::SubscribeLockedProductResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value =
                serde_json::from_str(r#"{"purchaseId":40607,"positionId":"12345","success":true}"#)
                    .unwrap();
            let dummy_response: models::SubscribeLockedProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SubscribeLockedProductResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }
    }

    #[test]
    fn get_flexible_subscription_preview_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = GetFlexibleSubscriptionPreviewParams::builder("1".to_string(),1.0,).build().unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"totalAmount":"1232.32230982","rewardAsset":"BUSD","airDropAsset":"BETH","estDailyBonusRewards":"0.22759183","estDailyRealTimeRewards":"0.22759183","estDailyAirdropRewards":"0.22759183"}"#).unwrap();
            let expected_response : models::GetFlexibleSubscriptionPreviewResponse = serde_json::from_value(resp_json.clone()).expect("should parse into models::GetFlexibleSubscriptionPreviewResponse");

            let resp = client.get_flexible_subscription_preview(params).await.expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn get_flexible_subscription_preview_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = GetFlexibleSubscriptionPreviewParams::builder("1".to_string(),1.0,).recv_window(5000).build().unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"totalAmount":"1232.32230982","rewardAsset":"BUSD","airDropAsset":"BETH","estDailyBonusRewards":"0.22759183","estDailyRealTimeRewards":"0.22759183","estDailyAirdropRewards":"0.22759183"}"#).unwrap();
            let expected_response : models::GetFlexibleSubscriptionPreviewResponse = serde_json::from_value(resp_json.clone()).expect("should parse into models::GetFlexibleSubscriptionPreviewResponse");

            let resp = client.get_flexible_subscription_preview(params).await.expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn get_flexible_subscription_preview_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = GetFlexibleSubscriptionPreviewParams::builder("1".to_string(), 1.0)
                .build()
                .unwrap();

            match client.get_flexible_subscription_preview(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn get_locked_subscription_preview_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = GetLockedSubscriptionPreviewParams::builder("1".to_string(),1.0,).build().unwrap();

            let resp_json: Value = serde_json::from_str(r#"[{"rewardAsset":"AXS","totalRewardAmt":"5.17181528","extraRewardAsset":"BNB","estTotalExtraRewardAmt":"5.17181528","boostRewardAsset":"AXS","estDailyRewardAmt":"1.20928901","nextPay":"1.29295383","nextPayDate":"1646697600000","valueDate":"1646697600000","rewardsEndDate":"1651449600000","deliverDate":"1651536000000","nextSubscriptionDate":"1651536000000"}]"#).unwrap();
            let expected_response : Vec<models::GetLockedSubscriptionPreviewResponseInner> = serde_json::from_value(resp_json.clone()).expect("should parse into Vec<models::GetLockedSubscriptionPreviewResponseInner>");

            let resp = client.get_locked_subscription_preview(params).await.expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn get_locked_subscription_preview_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = GetLockedSubscriptionPreviewParams::builder("1".to_string(),1.0,).auto_subscribe(true).recv_window(5000).build().unwrap();

            let resp_json: Value = serde_json::from_str(r#"[{"rewardAsset":"AXS","totalRewardAmt":"5.17181528","extraRewardAsset":"BNB","estTotalExtraRewardAmt":"5.17181528","boostRewardAsset":"AXS","estDailyRewardAmt":"1.20928901","nextPay":"1.29295383","nextPayDate":"1646697600000","valueDate":"1646697600000","rewardsEndDate":"1651449600000","deliverDate":"1651536000000","nextSubscriptionDate":"1651536000000"}]"#).unwrap();
            let expected_response : Vec<models::GetLockedSubscriptionPreviewResponseInner> = serde_json::from_value(resp_json.clone()).expect("should parse into Vec<models::GetLockedSubscriptionPreviewResponseInner>");

            let resp = client.get_locked_subscription_preview(params).await.expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn get_locked_subscription_preview_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = GetLockedSubscriptionPreviewParams::builder("1".to_string(), 1.0)
                .build()
                .unwrap();

            match client.get_locked_subscription_preview(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn redeem_flexible_product_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = RedeemFlexibleProductParams::builder("1".to_string())
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"redeemId":40607,"success":true}"#).unwrap();
            let expected_response: models::RedeemFlexibleProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::RedeemFlexibleProductResponse");

            let resp = client
                .redeem_flexible_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn redeem_flexible_product_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = RedeemFlexibleProductParams::builder("1".to_string())
                .redeem_all(false)
                .amount(1.0)
                .dest_account("SPOT".to_string())
                .recv_window(5000)
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"redeemId":40607,"success":true}"#).unwrap();
            let expected_response: models::RedeemFlexibleProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::RedeemFlexibleProductResponse");

            let resp = client
                .redeem_flexible_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn redeem_flexible_product_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = RedeemFlexibleProductParams::builder("1".to_string())
                .build()
                .unwrap();

            match client.redeem_flexible_product(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn redeem_locked_product_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = RedeemLockedProductParams::builder("1".to_string())
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"redeemId":40607,"success":true}"#).unwrap();
            let expected_response: models::RedeemLockedProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::RedeemLockedProductResponse");

            let resp = client
                .redeem_locked_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn redeem_locked_product_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = RedeemLockedProductParams::builder("1".to_string())
                .recv_window(5000)
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"redeemId":40607,"success":true}"#).unwrap();
            let expected_response: models::RedeemLockedProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::RedeemLockedProductResponse");

            let resp = client
                .redeem_locked_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn redeem_locked_product_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = RedeemLockedProductParams::builder("1".to_string())
                .build()
                .unwrap();

            match client.redeem_locked_product(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn set_flexible_auto_subscribe_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SetFlexibleAutoSubscribeParams::builder("1".to_string(), true)
                .build()
                .unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let expected_response: models::SetFlexibleAutoSubscribeResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetFlexibleAutoSubscribeResponse");

            let resp = client
                .set_flexible_auto_subscribe(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn set_flexible_auto_subscribe_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SetFlexibleAutoSubscribeParams::builder("1".to_string(), true)
                .recv_window(5000)
                .build()
                .unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let expected_response: models::SetFlexibleAutoSubscribeResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetFlexibleAutoSubscribeResponse");

            let resp = client
                .set_flexible_auto_subscribe(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn set_flexible_auto_subscribe_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = SetFlexibleAutoSubscribeParams::builder("1".to_string(), true)
                .build()
                .unwrap();

            match client.set_flexible_auto_subscribe(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn set_locked_auto_subscribe_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SetLockedAutoSubscribeParams::builder("1".to_string(), true)
                .build()
                .unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let expected_response: models::SetLockedAutoSubscribeResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetLockedAutoSubscribeResponse");

            let resp = client
                .set_locked_auto_subscribe(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn set_locked_auto_subscribe_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SetLockedAutoSubscribeParams::builder("1".to_string(), true)
                .recv_window(5000)
                .build()
                .unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let expected_response: models::SetLockedAutoSubscribeResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetLockedAutoSubscribeResponse");

            let resp = client
                .set_locked_auto_subscribe(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn set_locked_auto_subscribe_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = SetLockedAutoSubscribeParams::builder("1".to_string(), true)
                .build()
                .unwrap();

            match client.set_locked_auto_subscribe(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn set_locked_product_redeem_option_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SetLockedProductRedeemOptionParams::builder(
                "1".to_string(),
                "redeem_to_example".to_string(),
            )
            .build()
            .unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let expected_response: models::SetLockedProductRedeemOptionResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetLockedProductRedeemOptionResponse");

            let resp = client
                .set_locked_product_redeem_option(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn set_locked_product_redeem_option_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SetLockedProductRedeemOptionParams::builder(
                "1".to_string(),
                "redeem_to_example".to_string(),
            )
            .recv_window(5000)
            .build()
            .unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"success":true}"#).unwrap();
            let expected_response: models::SetLockedProductRedeemOptionResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SetLockedProductRedeemOptionResponse");

            let resp = client
                .set_locked_product_redeem_option(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn set_locked_product_redeem_option_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = SetLockedProductRedeemOptionParams::builder(
                "1".to_string(),
                "redeem_to_example".to_string(),
            )
            .build()
            .unwrap();

            match client.set_locked_product_redeem_option(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn subscribe_flexible_product_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SubscribeFlexibleProductParams::builder("1".to_string(), 1.0)
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"purchaseId":40607,"success":true}"#).unwrap();
            let expected_response: models::SubscribeFlexibleProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SubscribeFlexibleProductResponse");

            let resp = client
                .subscribe_flexible_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn subscribe_flexible_product_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SubscribeFlexibleProductParams::builder("1".to_string(), 1.0)
                .auto_subscribe(true)
                .source_account("SPOT".to_string())
                .recv_window(5000)
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"purchaseId":40607,"success":true}"#).unwrap();
            let expected_response: models::SubscribeFlexibleProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SubscribeFlexibleProductResponse");

            let resp = client
                .subscribe_flexible_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn subscribe_flexible_product_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = SubscribeFlexibleProductParams::builder("1".to_string(), 1.0)
                .build()
                .unwrap();

            match client.subscribe_flexible_product(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }

    #[test]
    fn subscribe_locked_product_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SubscribeLockedProductParams::builder("1".to_string(), 1.0)
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"purchaseId":40607,"positionId":"12345","success":true}"#)
                    .unwrap();
            let expected_response: models::SubscribeLockedProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SubscribeLockedProductResponse");

            let resp = client
                .subscribe_locked_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn subscribe_locked_product_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: false };

            let params = SubscribeLockedProductParams::builder("1".to_string(), 1.0)
                .auto_subscribe(true)
                .source_account("SPOT".to_string())
                .redeem_to(String::new())
                .recv_window(5000)
                .build()
                .unwrap();

            let resp_json: Value =
                serde_json::from_str(r#"{"purchaseId":40607,"positionId":"12345","success":true}"#)
                    .unwrap();
            let expected_response: models::SubscribeLockedProductResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::SubscribeLockedProductResponse");

            let resp = client
                .subscribe_locked_product(params)
                .await
                .expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn subscribe_locked_product_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockEarnApiClient { force_error: true };

            let params = SubscribeLockedProductParams::builder("1".to_string(), 1.0)
                .build()
                .unwrap();

            match client.subscribe_locked_product(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }
}
